// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:

   //If zx == 1, x=0 else x=x
    Mux16(a=x, b=false, sel=zx, out=xnew1);

   //If nx == 1, x=!x else x=x
    Not16(in=xnew1, out=notXnew1);
    Mux16(a=xnew1, b=notXnew1, sel=nx, out=xnew2);

   //If zy == 1, y=0 else y=y
    Mux16(a=y, b=false, sel=zy, out=ynew1);

   //If ny == 1, y=!y else y=y
    Not16(in=ynew1, out=notYnew1);
    Mux16(a=ynew1, b=notYnew1, sel=ny, out=ynew2);

   //If f == 1, out=x+y else out=x&y
    Add16(a=xnew2, b=ynew2, out=xnew2Plusynew2);
    And16(a=xnew2, b=ynew2, out=xnew2Andynew2);
    Mux16(a=xnew2Andynew2, b=xnew2Plusynew2, sel=f, out=tempOut);

   //If no == 1, out=!out else out=out
    Not16(in=tempOut, out=notTempOut);
    Mux16(a=tempOut, b=notTempOut, sel=no, out=tempOut2);
    Or16(a=tempOut2, b=false, out=out);

   //If out == 0, zr=1 else zr=0
    Or16Way(in=tempOut2, out=outVal); //Helper function own-implemented
    Not(in=outVal, out=zr);

   //If out < 0, ng=1 else ng=0
    Neg16(in=tempOut2, out=ng); //Helper function own-implemented
}
